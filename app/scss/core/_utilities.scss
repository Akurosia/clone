// =============================================================================

    // Clone
    // Utility Classes

// =============================================================================

// Table of Contents ===========================================================

    // Backgrounds
    // Borders
    // Containers
    // Fonts
        // Colour
        // Headings
        // Styles
    // Margins
        // Half Margins
        // Regular Margins
        // Double Margins
        // Triple Margins
    // Padding
        // Half Padding
        // Regular Padding
        // Double Padding
        // Triple Padding

// =============================================================================

// Alignment ===================================================================

    [data-clone-alignment="center"],
    [data-clone-alignment="centre"] {text-align: center;}
    [data-clone-alignment="right"] {text-align: right;}
    [data-clone-alignment="left"] {text-align: left;}

    $clone-alignment-map: (
        "left": left,
        "center": center,
        "centre": center,
        "right": right
    );

    @each $key, $value in $clone-alignment-map {
        [data-clone-alignment*="base(#{$key})"] {
            text-align: $value;
        }
    }
    @each $key, $value in $clone-alignment-map {
        @media #{$clone__phone-portrait} {
            [data-clone-alignment*="pp(#{$key})"] {
                text-align: $value;
            }
        }
    }
    @each $key, $value in $clone-alignment-map {
        @media #{$clone__phone-landscape} {
            [data-clone-alignment*="pl(#{$key})"] {
                text-align: $value;
            }
        }
    }
    @each $key, $value in $clone-alignment-map {
        @media #{$clone__tablet-portrait} {
            [data-clone-alignment*="tp(#{$key})"] {
                text-align: $value;
            }
        }
    }
    @each $key, $value in $clone-alignment-map {
        @media #{$clone__tablet-landscape} {
            [data-clone-alignment*="tl(#{$key})"] {
                text-align: $value;
            }
        }
    }
    @each $key, $value in $clone-alignment-map {
        @media #{$clone__desktop-small} {
            [data-clone-alignment*="ds(#{$key})"] {
                text-align: $value;
            }
        }
    }
    @each $key, $value in $clone-alignment-map {
        @media #{$clone__desktop-medium} {
            [data-clone-alignment*="dm(#{$key})"] {
                text-align: $value;
            }
        }
    }
    @each $key, $value in $clone-alignment-map {
        @media #{$clone__desktop-large} {
            [data-clone-alignment*="dl(#{$key})"] {
                text-align: $value;
            }
        }
    }

// a11y ========================================================================

    [data-clone-visibility="invisible"] {
        height: 1px;
        overflow: hidden;
        position: absolute;
        top: 0;
        left: -100vw;
        width: 1px;
    }

    [data-clone-visibility="hidden"] {
        display: none;
        visibility: hidden;
    }

// Backgrounds =================================================================

    $clone-colour-map: (
        "white": $clone__white,
        "grey": $clone__grey,
        "black": $clone__black,
        "go": $clone__go,
        "slow": $clone__slow,
        "stop": $clone__stop,
        "c1": $clone__c1,
        "c2": $clone__c2,
        "c3": $clone__c3,
        "c4": $clone__c4,
        "c5": $clone__c5
    );

    $clone-opacity-list: (0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100);

    @each $key, $value in $clone-colour-map {
        @each $alpha in $clone-opacity-list {
            $newValue: unquote($key)+"("+$alpha+")";
            [data-clone-background="#{$newValue}"] {
                $decimal: $alpha / 100;
                background: rgba($value, $decimal)
            }
        }
    };

// Borders =====================================================================

    $clone-border-style-list: ("solid", "dashed");
    $clone-border-width-list: ("thick", "thin");

    @each $style in $clone-border-style-list {
        @each $width in $clone-border-width-list {
            @each $key, $value in $clone-colour-map {
                &[data-clone-border*="all(#{$width}, #{$style}, #{$key})"] {
                    border-color: $value;
                    border-style: unquote($style);
                    @if ($width == "thin") {
                        border-width: 1px;
                    }
                    @if ($width == "thick") {
                        border-width: .5rem;
                    }
                }
            };
            @each $key, $value in $clone-colour-map {
                &[data-clone-border*="top(#{$width}, #{$style}, #{$key})"] {
                    border-top-color: $value;
                    border-top-style: unquote($style);
                    @if ($width == "thin") {
                        border-top-width: 1px;
                    }
                    @if ($width == "thick") {
                        border-top-width: .5rem;
                    }
                }
            };
            @each $key, $value in $clone-colour-map {
                &[data-clone-border*="right(#{$width}, #{$style}, #{$key})"] {
                    border-right-color: $value;
                    border-right-style: unquote($style);
                    @if ($width == "thin") {
                        border-right-width: 1px;
                    }
                    @if ($width == "thick") {
                        border-right-width: .5rem;
                    }
                }
            };
            @each $key, $value in $clone-colour-map {
                &[data-clone-border*="bottom(#{$width}, #{$style}, #{$key})"] {
                    border-bottom-color: $value;
                    border-bottom-style: unquote($style);
                    @if ($width == "thin") {
                        border-bottom-width: 1px;
                    }
                    @if ($width == "thick") {
                        border-bottom-width: .5rem;
                    }
                }
            };
            @each $key, $value in $clone-colour-map {
                &[data-clone-border*="left(#{$width}, #{$style}, #{$key})"] {
                    border-left-color: $value;
                    border-left-style: unquote($style);
                    @if ($width == "thin") {
                        border-left-width: 1px;
                    }
                    @if ($width == "thick") {
                        border-left-width: .5rem;
                    }
                }
            };
        };
    };

    [data-clone-radius="rounded"] {
        border-radius: 5px;
        overflow: hidden;
    }

    [data-clone-radius="pill"] {
        border-radius: 20rem;
        overflow: hidden;
    }

    .clone__shadow {box-shadow: 0 5px 10px rgba(0, 0, 0, .3);}

// Containers ==================================================================

    [data-clone-container="layout"] {
        margin: 0 auto;
        max-width: 80rem;
        width: 90%;
    }
    [data-clone-container="copy"] {
        margin: 0 auto;
        max-width: 39rem;
        width: 90%;
    }

// Fonts =======================================================================

    [data-clone-font="sans"] {font-family: $clone__font--sans;}
    [data-clone-font="serif"] {font-family: $clone__font--serif;}
    [data-clone-font="script"] {font-family: $clone__font--script;}
    [data-clone-font="mono"] {font-family: $clone__font--monospace;}

    // Font Colour -------------------------------------------------------------

        @each $key, $value in $clone-colour-map {
            [data-clone-font-colour="#{$key}"] {color: $value;}
            [data-clone-font-colour="#{$key}--light"] {color: lighten($value, 10%);}
            [data-clone-font-colour="#{$key}--dark"] {color: darken($value, 10%);}
            [data-clone-font-color="#{$key}"] {color: $value;}
            [data-clone-font-color="#{$key}--light"] {color: lighten($value, 10%);}
            [data-clone-font-color="#{$key}--dark"] {color: darken($value, 10%);}
        };

    // Font Weights ------------------------------------------------------------

        $clone-weight-map: (
            "100": 100,
            "200": 200,
            "300": 300,
            "400": 400,
            "normal": 400,
            "500": 500,
            "600": 600,
            "700": 700,
            "bold": 700,
            "800": 800,
            "900": 900
        );

        @each $key, $value in $clone-weight-map {
            [data-clone-font-weight="#{$key}"] {font-weight: $value;}
        };

    // Font Sizes --------------------------------------------------------------

        // [data-clone-font-size] {display: block;}

        [data-clone-font-size="h1"] {font-size: $clone__font-scale--h1;}
        [data-clone-font-size="h2"] {font-size: $clone__font-scale--h2;}
        [data-clone-font-size="h3"] {font-size: $clone__font-scale--h3;}
        [data-clone-font-size="h4"] {font-size: $clone__font-scale--h4;}
        [data-clone-font-size="h5"] {font-size: $clone__font-scale--h5;}
        [data-clone-font-size="small"] {font-size: $clone__font-scale--small;}

    // Font Styles -------------------------------------------------------------

        [data-clone-font-style="italic"] {font-style: italic;}

// Functions ===================================================================

    @function sqrt ($clone__r) {
        $clone__x0: 1;
        $clone__x1: $clone__x0;

        @for $clone__i from 1 through 10 {
            $clone__x1: $clone__x0 - ($clone__x0 * $clone__x0 - abs($clone__r)) / (2 * $clone__x0);
            $clone__x0: $clone__x1;
        }

        @return $clone__x1;
    }

    $clone__red-magic-number: 241;
    $clone__green-magic-number: 691;
    $clone__blue-magic-number: 68;
    $clone__brightness-divisor: $clone__red-magic-number + $clone__green-magic-number + $clone__blue-magic-number;

    @function brightness($clone__color) {
        // Extract color components
        $clone__red-component: red($clone__color);
        $clone__green-component: green($clone__color);
        $clone__blue-component: blue($clone__color);

        // Calculate a brightness value in 3d color space between 0 and 255
        $clone__number: sqrt((($clone__red-component * $clone__red-component * $clone__red-magic-number) + ($clone__green-component * $clone__green-component * $clone__green-magic-number) + ($clone__blue-component * $clone__blue-component * $clone__blue-magic-number)) / $clone__brightness-divisor);

        // Convert to percentage and return
        @return 100% * $clone__number / 255;
    }

    @function contrasting-color($clone__color, $clone__light, $clone__dark) {
        @if brightness($clone__color) < 65% {
            @return $clone__light;
        } @else {
            @return $clone__dark;
        }
    }

// Whitespace ==================================================================

    [data-clone-margin],
    [data-clone-padding] {
        display: block;
    }

    $clone-orientation-map: (
        "all": "",
        "top": "-top",
        "right": "-right",
        "bottom": "-bottom",
        "left": "-left"
    );
    $clone-whitespace-map: (
        "normal": "",
        "quarter": "/ 4",
        "half": "/ 2",
        "double": "* 2",
        "triple": "* 3"
        );

    // Margins -----------------------------------------------------------------

        // Shorthand ([data-clone-margin=normal]) ------------------------------
        @each $wKey, $wValue in $clone-whitespace-map {
            [data-clone-margin="#{$wKey}"] {
                margin: calc(#{$clone__margin} #{$wValue});
                @media #{$clone__tablet-portrait} {
                    margin: calc((#{$clone__margin} #{$wValue}) * #{$clone__whitespace-multiplier});
                }
                @media #{$clone__desktop-large} {
                    margin: calc(((#{$clone__margin} #{$wValue}) * #{$clone__whitespace-multiplier}) * #{$clone__whitespace-multiplier});
                }
            }
        }

        // Shorthand ([data-clone-margin=top]) ---------------------------------
        @each $oKey, $oValue in $clone-orientation-map {
            [data-clone-margin="#{$oKey}"] {
                margin#{$oValue}: calc(#{$clone__margin});
                @media #{$clone__tablet-portrait} {
                    margin#{$oValue}: calc(#{$clone__margin} * #{$clone__whitespace-multiplier});
                }
                @media #{$clone__desktop-large} {
                    margin#{$oValue}: calc((#{$clone__margin} * #{$clone__whitespace-multiplier}) * #{$clone__whitespace-multiplier});
                }
            }
        }

        // Margin Syntax -------------------------------------------------------
        @each $oKey, $oValue in $clone-orientation-map {
            @each $wKey, $wValue in $clone-whitespace-map {
                [data-clone-margin*="#{$oKey}(#{$wKey})"] {
                    margin#{$oValue}: calc(#{$clone__margin} #{$wValue});
                    @media #{$clone__tablet-portrait} {
                        margin#{$oValue}: calc((#{$clone__margin} #{$wValue}) * #{$clone__whitespace-multiplier});
                    }
                    @media #{$clone__desktop-large} {
                        margin#{$oValue}: calc(((#{$clone__margin} #{$wValue}) * #{$clone__whitespace-multiplier}) * #{$clone__whitespace-multiplier});
                    }
                }
            }
        }

    // Padding -----------------------------------------------------------------

        // Shorthand ([data-clone-padding=normal]) -----------------------------
        @each $wKey, $wValue in $clone-whitespace-map {
            [data-clone-padding="#{$wKey}"] {
                padding: calc(#{$clone__padding} #{$wValue});
                @media #{$clone__tablet-portrait} {
                    padding: calc((#{$clone__padding} #{$wValue}) * #{$clone__whitespace-multiplier});
                }
                @media #{$clone__desktop-large} {
                    padding: calc(((#{$clone__padding} #{$wValue}) * #{$clone__whitespace-multiplier}) * #{$clone__whitespace-multiplier});
                }
            }
        }

        // Shorthand ([data-clone-padding=top]) --------------------------------
        @each $oKey, $oValue in $clone-orientation-map {
            [data-clone-padding="#{$oKey}"] {
                padding#{$oValue}: calc(#{$clone__padding});
                @media #{$clone__tablet-portrait} {
                    padding#{$oValue}: calc(#{$clone__padding} * #{$clone__whitespace-multiplier});
                }
                @media #{$clone__desktop-large} {
                    padding#{$oValue}: calc((#{$clone__padding} * #{$clone__whitespace-multiplier}) * #{$clone__whitespace-multiplier});
                }
            }
        }

        // Padding Syntax ------------------------------------------------------
        @each $oKey, $oValue in $clone-orientation-map {
            @each $wKey, $wValue in $clone-whitespace-map {
                [data-clone-padding*="#{$oKey}(#{$wKey})"] {
                    padding#{$oValue}: calc(#{$clone__padding} #{$wValue});
                    @media #{$clone__tablet-portrait} {
                        padding#{$oValue}: calc((#{$clone__padding} #{$wValue}) * #{$clone__whitespace-multiplier});
                    }
                    @media #{$clone__desktop-large} {
                        padding#{$oValue}: calc(((#{$clone__padding} #{$wValue}) * #{$clone__whitespace-multiplier}) * #{$clone__whitespace-multiplier});
                    }
                }
            }
        }

// Overlays ====================================================================

    @each $key, $value in $clone-colour-map {
        @each $alpha in $clone-opacity-list {
            $newValue: unquote($key)+"("+$alpha+")";
            [data-clone-overlay="#{$newValue}"] {
                position: relative;
                &::before {
                    $decimal: $alpha / 100;
                    background: rgba($value, $decimal);
                    content: " ";
                    display: block;
                    height: 100%;
                    position: absolute;
                    top: 0;
                    left: 0;
                    width: 100%;
                }
                * {
                    position: relative;
                }
            }
        }
    };
